import os
import sys
from typing import Dict, Union

from Deepurify.funcs import runLabelFilterSplitBins


def cleanMAGs(
    input_bin_folder_path: str,
    output_bin_folder_path: str,
    bin_suffix: str,
    gpu_num: int,
    batch_size_per_gpu: int,
    num_worker_per_device: int,
    overlapping_ratio=0.5,
    cutSeqLength=8192,
    num_cpus_call_genes=12,
    hmm_acc_cutoff=0.6,
    hmm_align_ratio_cutoff=0.4,
    estimated_completeness_threshold=0.55,
    seq_length_threshold=550000,
    checkM_parallel_num=1,
    num_cpus_per_checkm=12,
    dfs_or_greedy="dfs",
    topK=3,
    temp_output_folder: Union[str, None] = None,
    output_bins_meta_info_path: Union[str, None] = None,
    info_files_path: Union[str, None] = None,
    modelWeightPath: Union[str, None] = None,
    taxoVocabPath: Union[str, None] = None,
    taxoTreePath: Union[str, None] = None,
    taxoName2RepNormVecPath: Union[str, None] = None,
    hmmModelPath: Union[str, None] = None,
    model_config: Union[Dict, None] = None,
    stop_at_step2: bool = False
):
    """

    The main function to clean the MAGs.

    Args:
        input_bin_folder_path (str): The folder of input MAGs.

        output_bin_folder_path (str): The folder uses to output cleaned MAGs.

        bin_suffix (str): The bin suffix of MAGs.

        gpu_num (int): The number of GPUs would be used. 0 means to use CPU. (ATTENTION: CPU is significantly slower !!!!) Better to provide at least one GPU.

        batch_size_per_gpu (int): The number of sequences would be loaded to one GPU. It is useless if gpu_num is 0.

        num_worker_per_device (int): The number of workers for one GPU or CPU. The number of batch_size_per_gpu would divide this value for per worker.

        overlapping_ratio (float): The overlapping ratio would be used if the length of contig exceeds the cutSeqLength (8192). Defaults to 0.5.

        cutSeqLength (int, optional): The length to cut the contig if the length of it longer than this value. Defaults to 8192. (ATTENTION: 8192 is the maximum length during training.)

        num_cpus_call_genes (int, optional): The number of threads to call genes. Defaults to 12.

        hmm_acc_cutoff (float, optional): The threshold when the hmm model decides to treat the called gene's sequence as SCG. Defaults to 0.6.

        hmm_align_ratio_cutoff (float, optional): The threshold of alignment coverage when the called gene's sequence aligned to the SCG. Defaults to 0.4.

        estimated_completeness_threshold (float, optional): The threshold of estimated completeness for filtering bins generated by applying those SCGs. Defaults to 0.55.

        seq_length_threshold (int, optional): The threshold of a MAG's contigs' total length for filtering generated MAGs after applying SCGs.  Defaults to 550000.

        checkM_parallel_num (int, optional): The number of processes to run CheckM simultaneously. Defaults to 1.

        num_cpus_per_checkm (int, optional): The number of threads to run a CheckM process. Defaults to 12.

        dfs_or_greedy (str, optional): Depth first searching or greedy searching to label a contig. Defaults to "dfs".

        topK (int, optional): The Top-k nodes that have maximum cosine similarity with the contig encoded vector would be searched (Useless for greedy search). Defaults to 3.

        temp_output_folder (Union[str, None], optional): The path of a folder to store temporary files. Defaults to None.
        If the path is None, it would be built in the paraent folder of 'input_bin_folder_path'.

        output_bins_meta_info_path (Union[str, None], optional): The path of a txt file that uses to record the meta informations (evaluated result) of final cleaned MAGs. Defaults to None.
        If the path is None, then the file would be built under the 'output_bin_folder_path'.

        info_files_path (Union[str, None]): The path of DeepurifyInfoFiles folder. Defaults to None.
        If the path is None, please make sure you have set the environment variable 'DeepurifyInfoFiles'. 

        modelWeightPath (Union[str, None], optional): The path of model weight. (In DeepurifyInfoFiles folder) Defaults to None.

        taxoVocabPath (Union[str, None], optional): The path of taxon vocabulary. (In DeepurifyInfoFiles folder) Defaults to None.

        taxoTreePath (Union[str, None], optional): The path of taxonomic tree. (In DeepurifyInfoFiles folder) Defaults to None.

        taxoName2RepNormVecPath (Union[str, None], optional): The path of taxonomic lineage encoded vectors. (In DeepurifyInfoFiles folder) Defaults to None.

        hmmModelPath (Union[str, None], optional): The path of SCGs' hmm file. (In DeepurifyInfoFiles folder) Defaults to None.

        model_config (Union[Dict, None], optional): The config of model. See the TrainScript.py to find more information. Defaults to None.
        It would be used if you trained a another model with different model_config. Please set this variable equal with None at present.

        stop_at_step2 (bool, optional): If stop deepurify at step 2 workflow. Defaults to False. 
        This parameter is appropriate to calculate the metrics if you know which contig is clean and which is contaminated under the simulated dataset if this variable is True.
        For a MAG, we would only output contigs containing the core lineage label at distinct taxonomic ranks (with different cosine similarity threshold.) if this variable is True.
        The outputs are all in the folder of /temp_output_folder/FilterOutput/ PATH. 
        We would not evaluate the cleaned MAGs at different taxonomic ranks. 
        You should independently evaluate the outcomes from various taxonomic ranks and select the best output from the cleaned MAGs. 
    """

    print("##################################")
    print("###  WELCOME TO USE DEEPURIFY  ###")
    print("##################################")
    print()
    assert batch_size_per_gpu <= 20, "batch_size_per_gpu must smaller or equal with 20."
    assert num_worker_per_device <= 4, "num_worker_per_device must smaller or equal with 4."

    if "/" == input_bin_folder_path[-1]:
        input_bin_folder_path = input_bin_folder_path[0:-1]

    filesFolder = os.path.split(input_bin_folder_path)[0]
    if temp_output_folder is None:
        temp_output_folder = os.path.join(filesFolder, "DeepurifyTempOut")

    if output_bins_meta_info_path is None:
        output_bins_meta_info_path = os.path.join(output_bin_folder_path, "MetaInfo.txt")

    if gpu_num == 0:
        gpu_work_ratio = []
    else:
        gpu_work_ratio = [1.0 / gpu_num for _ in range(gpu_num - 1)]
        gpu_work_ratio = gpu_work_ratio + [1.0 - sum(gpu_work_ratio)]
    batch_size_per_gpu = [batch_size_per_gpu for _ in range(gpu_num)]

    if info_files_path is None:
        try:
            info_files_path = os.environ["DeepurifyInfoFiles"]
            modelWeightPath = os.path.join(info_files_path, "CheckPoint", "Deepurify.ckpt")
            taxoVocabPath = os.path.join(info_files_path, "TaxonomyInfo", "ProGenomesVocabulary.txt")
            taxoTreePath = os.path.join(info_files_path, "TaxonomyInfo", "ProGenomesTaxonomyTree.pkl")
            taxoName2RepNormVecPath = os.path.join(info_files_path, "PyObjs", "Deepurify_taxo_lineage_vector.pkl")
            hmmModelPath = os.path.join(info_files_path, "HMM", "hmm_model.hmm")
            mer3Path = os.path.join(info_files_path, "3Mer_vocabulary.txt")
            mer4Path = os.path.join(info_files_path, "4Mer_vocabulary.txt")
        except:
            print("Warnning !!!! Can not find environment variable 'DeepurifyInfoFiles', Make sure the variables of file paths are not None.")
            if taxoName2RepNormVecPath is None:
                print("The variable taxoName2RepNormVecPath is None, would build this file with this path: {}".format(os.path.join(
                    filesFolder, "DeepurifyTempOut" "Deepurify_taxo_lineage_vector.pkl")))
                taxoName2RepNormVecPath = os.path.join(
                    filesFolder, "DeepurifyTempOut" "Deepurify_taxo_lineage_vector.pkl")

    assert mer3Path is not None and mer4Path is not None, ValueError(
        "The variable mer3Path or mer4Path is None. Please check this file if it is in 'DeepurifyInfoFiles' folder.")
    assert modelWeightPath is not None, ValueError(
        "The variable modelWeightPath is None. Please check this file if it is in 'DeepurifyInfoFiles' folder.")
    assert taxoVocabPath is not None, ValueError(
        "The variable taxoVocabPath is None. Please check this file if it is in 'DeepurifyInfoFiles' folder.")
    assert taxoTreePath is not None, ValueError(
        "The variable taxoTreePath is None. Please check this file if it is in 'DeepurifyInfoFiles' folder.")
    if stop_at_step2 is False:
        assert hmmModelPath is not None, ValueError(
            "The variable hmmModelPath is None. Please check this file if it is in 'DeepurifyInfoFiles' folder.")

    if os.path.exists(filesFolder) is False:
        print("Your input folder is not exist.")
        sys.exit(1)

    runLabelFilterSplitBins(
        inputBinFolder=input_bin_folder_path,
        tempFileOutFolder=temp_output_folder,
        outputBinFolder=output_bin_folder_path,
        outputBinsMetaFilePath=output_bins_meta_info_path,
        modelWeightPath=modelWeightPath,
        hmmModelPath=hmmModelPath,
        taxoVocabPath=taxoVocabPath,
        taxoTreePath=taxoTreePath,
        taxoName2RepNormVecPath=taxoName2RepNormVecPath,
        gpus_work_ratio=gpu_work_ratio,
        batch_size_per_gpu=batch_size_per_gpu,
        num_worker_per_device=num_worker_per_device,
        bin_suffix=bin_suffix,
        mer3Path=mer3Path,
        mer4Path=mer4Path,
        overlapping_ratio=overlapping_ratio,
        cutSeqLength=cutSeqLength,
        num_cpus_call_genes=num_cpus_call_genes,
        ratio_cutoff=hmm_align_ratio_cutoff,
        acc_cutoff=hmm_acc_cutoff,
        estimated_completeness_threshold=estimated_completeness_threshold,
        seq_length_threshold=seq_length_threshold,
        checkM_parallel_num=checkM_parallel_num,
        num_cpus_per_checkm=num_cpus_per_checkm,
        dfsORgreedy=dfs_or_greedy,
        topK=topK,
        model_config=model_config,
        stop_at_step2=stop_at_step2
    )
